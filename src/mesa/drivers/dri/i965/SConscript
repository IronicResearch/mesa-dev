###################################
# SConscript file for dri targets

import os
import os.path
Import('*')

# intel support libs
SConscript('#src/intel/SConscript')

#
# dri_i965
#
env = env.Clone()

env.Append(CPPPATH = [
    '#/include/drm-uapi',
    '/usr/include/libdrm',
    '#/include',
    '#/src/',
    '#/src/compiler/nir',
    '#/src/intel',
    '#/src/mapi',
    '#/src/mesa',
    '#/src/mesa/drivers/dri/common',
    xmlpool_options.dir.dir, # Dir to generated xmlpool/options.h
])

env.Append(CPPDEFINES = [
    'HAVE_DLADDR',
])

#libi965_gen11_la_SOURCES = $(i965_gen11_FILES)
#libi965_gen11_la_CFLAGS = $(AM_CFLAGS) -DGEN_VERSIONx10=110

env_gen11 = env.Clone()
env_gen11.Append(CPPDEFINES = ['GEN_VERSIONx10=110'])
src_gen11 = env_gen11.ParseSourceList('Makefile.sources', 'i965_gen11_FILES')
lib_gen11 = env_gen11.ConvenienceLibrary(target = 'lib_gen11', source = src_gen11)

env_gen5 = env.Clone()
env_gen5.Append(CPPDEFINES = ['GEN_VERSIONx10=50'])
src_gen5 = env_gen5.ParseSourceList('Makefile.sources', 'i965_gen5_FILES')
lib_gen5 = env_gen5.ConvenienceLibrary(target = 'lib_gen5', source = src_gen5)

env_gen6 = env.Clone()
env_gen6.Append(CPPDEFINES = ['GEN_VERSIONx10=60'])
src_gen6 = env_gen6.ParseSourceList('Makefile.sources', 'i965_gen6_FILES')
lib_gen6 = env_gen6.ConvenienceLibrary(target = 'lib_gen6', source = src_gen6)

env_gen10 = env.Clone()
env_gen10.Append(CPPDEFINES = ['GEN_VERSIONx10=100'])
src_gen10 = env_gen10.ParseSourceList('Makefile.sources', 'i965_gen10_FILES')
lib_gen10 = env_gen10.ConvenienceLibrary(target = 'lib_gen10', source = src_gen10)

env_gen75 = env.Clone()
env_gen75.Append(CPPDEFINES = ['GEN_VERSIONx10=75'])
src_gen75 = env_gen75.ParseSourceList('Makefile.sources', 'i965_gen75_FILES')
lib_gen75 = env_gen75.ConvenienceLibrary(target = 'lib_gen75', source = src_gen75)

env_gen45 = env.Clone()
env_gen45.Append(CPPDEFINES = ['GEN_VERSIONx10=45'])
src_gen45 = env_gen45.ParseSourceList('Makefile.sources', 'i965_gen45_FILES')
lib_gen45 = env_gen45.ConvenienceLibrary(target = 'lib_gen45', source = src_gen45)

env_gen7 = env.Clone()
env_gen7.Append(CPPDEFINES = ['GEN_VERSIONx10=70'])
src_gen7 = env_gen7.ParseSourceList('Makefile.sources', 'i965_gen7_FILES')
lib_gen7 = env_gen7.ConvenienceLibrary(target = 'lib_gen7', source = src_gen7)

env_gen8 = env.Clone()
env_gen8.Append(CPPDEFINES = ['GEN_VERSIONx10=80'])
src_gen8 = env_gen8.ParseSourceList('Makefile.sources', 'i965_gen8_FILES')
lib_gen8 = env_gen8.ConvenienceLibrary(target = 'lib_gen8', source = src_gen8)

env_gen9 = env.Clone()
env_gen9.Append(CPPDEFINES = ['GEN_VERSIONx10=90'])
src_gen9 = env_gen9.ParseSourceList('Makefile.sources', 'i965_gen9_FILES')
lib_gen9 = env_gen9.ConvenienceLibrary(target = 'lib_gen9', source = src_gen9)

env_gen4 = env.Clone()
env_gen4.Append(CPPDEFINES = ['GEN_VERSIONx10=40'])
src_gen4 = env_gen4.ParseSourceList('Makefile.sources', 'i965_gen4_FILES')
lib_gen4 = env_gen4.ConvenienceLibrary(target = 'lib_gen4', source = src_gen4)

# LIBS to link driver for local Mesa imports
env.Prepend(LIBS = [
    libloader,
    mesautil,
    compiler,
    mesa,
    glsl,
    megadrivers_stub,
    dri_common,
    nir,
    lib_gen11,
    lib_gen5,
    lib_gen6,
    lib_gen10,
    lib_gen75,
    lib_gen45,
    lib_gen7,
    lib_gen8,
    lib_gen9,
    lib_gen4,
    lib_intel_common,
    lib_intel_compiler,
    lib_intel_blorp,
    lib_intel_dev,
    lib_intel_isl,
    lib_isl_gen4,
    lib_isl_gen5,
    lib_isl_gen6,
    lib_isl_gen7,
    lib_isl_gen75,
    lib_isl_gen8,
    lib_isl_gen9,
    lib_isl_gen10,
    lib_isl_gen11,
])

# LIBS to link driver for DRM platform imports
env.Append(LIBS = ['drm','drm_intel','expat'])
#env.Append(LIBPATH = ['/usr/lib/i386-linux-gnu'])
#libpath = ''
#env.Command(target = libpath, source = 'libdrm', action = "pkg-config --variable=libdir $SOURCE > $TARGET")
libpath = os.popen("pkg-config --variable=libdir libdrm").read()
libpath = libpath.strip('\n')
env.Prepend(LIBPATH = libpath)

sources = env.ParseSourceList('Makefile.sources', 
	['i965_FILES',
	'i965_oa_GENERATED_FILES',
	'intel_tiled_memcpy_FILES'
	])

dri_i965 = env.SharedLibrary(
	target = 'i965_dri.so',
	source = sources,
	SHLIBPREFIX = '',
)

env.Alias('dri_i965', dri_i965)

Export([
    'dri_i965',
])
